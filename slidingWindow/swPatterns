In many coding problems where we are dealing with an array (or a LinkedList), we are asked to find or calculate something among all the subarrays (or sublists)
of a given size.Size may be given directly or indirectly.

1. Leetcode 643 (https://leetcode.com/problems/maximum-average-subarray-i/)
---------------------------------------------------------------------------
class Solution {
public:
    //Basic approach :- time :- O(nk) | space :- O(1) where n = length of nums and k = size of subarray
    double findMaxAverage(vector<int>& nums, int k) {
        double res = -1e9;
        for(int i = 0; i <= nums.size() - k; i++){
            int windowSum = 0;
            for(int j = 0; j < k; j++){
                windowSum += nums[i + j];
            }
            res = max(res, (double)windowSum / k);
        }
        return res;
    }
};

what is in-efficient in basic approach code ?
ans:- we have already calculated sum of k length of subarray in start for 0th index so when we are starting a subarray form 1st(any ith) index we have already 
computed k - 1 values of subarray so we only need kth value of subarray.

class Solution {
public:
    //optimized approach :- time :- O(n) | space :- O(1) where n = length of array nums
    double findMaxAverage(vector<int>& nums, int k) {
        double res = -1e9, windowSum = 0;
        for(int i = 0; i < nums.size(); i++){
            windowSum += nums[i];
            if(i >= k - 1){
                res = max(res, windowSum / k);
                windowSum -= nums[i + 1 - k];
            }
        }
        return res;
    }
};

2. GeeksForGeeks(https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MaxSumSubArrayOfSizeK
{
   //Basic approach :- time :- O(nk) | space :- O(1) where n = length of arr and k = size of subarray
public:
    static int findMaxSumSubArray(int k, const vector<int> &arr)
    {
        int maxSum = 0, windowSum;
        for (int i = 0; i <= arr.size() - k; i++)
        {
            windowSum = 0;
            for (int j = i; j < i + k; j++)
            {
                windowSum += arr[j];
            }
            maxSum = max(maxSum, windowSum);
        }

        return maxSum;
    }
};

class Solution{ 
    //optimized approach :- time :- O(n) | space(1) where n = length of arr
public:
    long maximumSumSubarray(int K, vector<int> &Arr , int N){
        long res = INT_MIN, windowSum = 0;
        for(int i = 0; i < N; i++){
            windowSum += Arr[i];
            if(i >= K - 1){
                res = max(res, windowSum);
                windowSum -= Arr[i + 1- K];
            }
        }
        return res;
    }
};

3. Leetcode 209 (https://leetcode.com/problems/minimum-size-subarray-sum/)***(imp concept)
---------------------------------------------------------------------------
class Solution {
public:
    //basic approach :- time :- O(n^2) | space :- O(1) where n = length of nums
    int minSubArrayLen(int target, vector<int>& nums) {
        int windowLength = INT_MAX;
        for(int i = 0; i < nums.size(); i++){
            int windowSum = 0;
            int j = i;
            while(j < nums.size() && windowSum < target){
                windowSum += nums[j++];
            }
            
            if(windowSum >= target){
                windowLength = min(windowLength, j - i);
            }
        }
        return windowLength == INT_MAX ? 0 : windowLength;
    }
};

class Solution {
public:
    //optimized approach :- time :- O(n) | space :- O(1)
    int minSubArrayLen(int target, vector<int>& nums) {
        int windowLength = INT_MAX, windowSum = 0, windowStart = 0;
        for(int windowEnd = 0; windowEnd < nums.size(); windowEnd++){
            windowSum += nums[windowEnd];
            while(windowSum >= target){
                windowLength = min(windowLength, windowEnd + 1 - windowStart);
                windowSum -= nums[windowStart++];
            }
        }
        return windowLength == INT_MAX ? 0 : windowLength;
    }
};

4. GeeksForGeeks(https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1)
----------------------------------------------------------------------------------------------------------
class Solution{
    //basic approach :- time :- O(n^2) | space :- O(1) where n = length of string s
  public:
    int longestKSubstr(string s, int k) {
        int windowLength = -1;
        for(int i = 0; i < s.size(); i++){
            int j = i;
            unordered_set<char> windowChar;
            while(j < s.size() && windowChar.size() <= k){
                windowChar.insert(s[j]);
                if(windowChar.size() > k){
                    break;
                }
                j++;
            }
            
            if(windowChar.size() >= k){
                windowLength = max(windowLength, j - i);
            }
        }
        return windowLength;
    }
};

class Solution{
    //optimized approach :- time :- O(n) | space :- O(1) where n = length of string s
  public:
    int longestKSubstr(string s, int k) {
        int windowStart = 0, windowLength = -1;
        unordered_map<char, int> windowChar;
        for(int windowEnd = 0; windowEnd < s.size(); windowEnd++){
            windowChar[s[windowEnd]] += 1;
            
            while(windowChar.size() > k){
                char leftChar = s[windowStart++];
                windowChar[leftChar] -= 1;
                if(windowChar[leftChar] == 0){
                    windowChar.erase(leftChar);
                }
            }
            
            if(windowChar.size() == k){
                windowLength = max(windowLength, windowEnd + 1 - windowStart);
            }
        }
        return windowLength;
    }
};

variation Problem Leetcode:- Given a string, find the length of the longest substring in it with no more than K distinct characters. 
soln :- just do one simple change in above code u will get the solution(think it yourself).

5. Leetcode (https://leetcode.com/problems/fruit-into-baskets/)
-------------------------------------------------------------------
Basic approach is similar to 4th problem basic solution.

class Solution {
    //optimized approach :- time :- O(n) | space :- O(1) where n = length of fruits array
public:
    int totalFruit(vector<int>& fruits) {
        int windowStart = 0, res = 0;
        unordered_map<int, int> fruitsTypes;
        for(int windowEnd = 0; windowEnd < fruits.size(); windowEnd++){
            fruitsTypes[fruits[windowEnd]] += 1;
            while(fruitsTypes.size() > 2){
                fruitsTypes[fruits[windowStart]] -= 1;
                if(fruitsTypes[fruits[windowStart]] == 0){
                    fruitsTypes.erase(fruits[windowStart]);
                }
                windowStart++;
            }
            res = max(res, windowEnd + 1 - windowStart);
        }
        return res;
    }
};

Note :- problem is variation of longest subarray with k distinct elements where k == 2(variation of 4th problem)

6. Leetcode (https://leetcode.com/problems/longest-substring-without-repeating-characters/)
--------------------------------------------------------------------------------------------
class Solution {
    //basic approach :- time :- O(n^2) | space :- O(1) where n = length of s
public:
    int lengthOfLongestSubstring(string s) {
        int res = 0;
        for(int i = 0; i < s.length(); i++){
            unordered_set<char> windowChar;
            int j = i;
            while(j < s.length() && windowChar.find(s[j]) == windowChar.end()){
                windowChar.insert(s[j]);
                j++;
            }
            res = max(res, j - i);
        }
        return res;
    }
};

class Solution {
    //optimized approach :- time :- O(n) | space :- O(1) where n = length of s
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> charToIndexMap(256, -1);
        int res = 0, windowStart = 0;
        for(int windowEnd = 0; windowEnd < s.size(); windowEnd++){
            windowStart = max(charToIndexMap[s[windowEnd]] + 1, windowStart);
            res = max(res, windowEnd + 1 - windowStart);
            charToIndexMap[s[windowEnd]] = windowEnd;
        }
        return res;
    }
};

7. Leetcode (https://leetcode.com/problems/longest-repeating-character-replacement/)
----------------------------------------------------------------------------------------
class Solution {
    //basic approach :- time :- O(n^2) | space :- O(1) where n = length of s
public:
    int characterReplacement(string s, int k) {
        int windowLength = 0;
        for(int i = 0; i < s.length(); i++){
            vector<int> windowCharFreq(26, 0);
            int maxCharFreq = 1;
            int j = i;
            windowCharFreq[s[j] - 'A'] += 1; 
            while(j < s.length() && (j + 1 - i - maxCharFreq) <= k){
                j++;
                if(j < s.length()){
                    windowCharFreq[s[j] - 'A'] += 1;
                    maxCharFreq = max(maxCharFreq, windowCharFreq[s[j] - 'A']);
                }
            }
            windowLength = max(windowLength, j - i);
        }
        return windowLength;
    }
};

class Solution {
    //optimized approach :- time :- O(n) | space :- O(1) where n = length of s
public:
    int characterReplacement(string s, int k) {
        int windowStart = 0, windowLength = 0, maxCharFreq = 0;
        vector<int> windowCharFreq(26, 0);
        for(int windowEnd = 0; windowEnd < s.length(); windowEnd++){
            windowCharFreq[s[windowEnd] - 'A'] += 1;
            maxCharFreq = max(maxCharFreq, windowCharFreq[s[windowEnd] - 'A']);
            while(windowEnd + 1 - windowStart - maxCharFreq > k){
                windowCharFreq[s[windowStart] - 'A'] -= 1;
                //no need to count maxCharFreq while shrinking window think Why???????
                //maxCharFreq = 0;
                // for(int i = 0; i < 26; i++){
                //     maxCharFreq = max(maxCharFreq, windowCharFreq[i]);
                // }
                windowStart += 1;
            }
            windowLength = max(windowLength, windowEnd + 1 - windowStart);
        }
        return windowLength;
    }
};

8. Leetcode (https://leetcode.com/problems/max-consecutive-ones-iii/)
-----------------------------------------------------------------------
class Solution {
    //basic approach :- time :- O(n^2) | space :- O(1) where n = size of nums
public:
    int longestOnes(vector<int>& nums, int k) {
        int res = 0;
        for(int i = 0; i < nums.size(); i++){
            vector<int> binaryFreq(2, 0);
            int j = i;
            binaryFreq[nums[j]] += 1;
            while(j < nums.size() && binaryFreq[0] <= k){
                j++;
                if(j < nums.size()){
                    binaryFreq[nums[j]] += 1;
                }
            }
            res = max(res, j - i);
        }
        return res;
    }
};

class Solution {
    //basic approach :- time:- O(n) | space:- O(1) where n = length of nums
public:
    int longestOnes(vector<int>& nums, int k) {
        int windowLength = 0, windowStart = 0;
        vector<int> binaryFreqWindow(2, 0);
        for(int windowEnd = 0; windowEnd < nums.size(); windowEnd++){
            binaryFreqWindow[nums[windowEnd]] += 1;
            while(binaryFreqWindow[0] > k){
                binaryFreqWindow[nums[windowStart++]] -= 1;
            }
            windowLength = max(windowLength, windowEnd + 1 - windowStart);
        }
        return windowLength;
    }
};
